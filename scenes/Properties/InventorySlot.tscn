[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

resource_name = "InventorySlot"
script/source = "extends Node
#class for holding specified things. It describes place on which item is placed (name of node), 
#what is the type of item(permitted_items), how much is there of it(item_count) and can be (max_weight),
#and ?can it be used immediately without switching? (like in_hands or on_belt)
#Every object that is supposed to have some kind of inventory has this node.
#Every such node corresponds to one type of item. 

#So for example player will have it for head, etc.
#Backpack will have infinite number, that will be increased as new items are added to it.
#...you can also hold alive things if they fit
export (int) var max_weight = 5000 #in grams
export (PackedScene) var initial_item

#onready var permitted_items = []

func _ready():
	if initial_item:
		add_item(initial_item.instance())
	pass

func _use_item():
	
	pass

func add_item(item_in, amount = item_in.count):
	#check if slot available, is it too big, -and can it be put in this slot-
	print(\"Hi! my name is %s\" % item_in.name)
	if !get_child_count():
		if item_in.get_parent():
			item_in.get_parent().remove_child(item_in)
		add_child(item_in)
		item_in.hide()
		item_in.position = Vector2(0, 0)
		return true
	elif get_child(0) != item_in or (item_in.weight * amount + get_child(0).weight * get_child(0).count) > max_weight:
		return false
	else:
		get_child(0).count += amount
		item_in.get_parent().remove_child(item_in)
		add_child(item_in)
		item_in.hide()
		item_in.position = Vector2(0, 0)
		return true
	pass

func remove_item(amount = 0):
	var tem
	if !get_child_count() or get_child(0).count < amount: #if we don't have item, or too little of it
		return false
	elif amount == 0: #if we have item and want to delete all of it
		tem = get_child(0)
		remove_child(tem)
		tem.show()
		return tem
	else: #if we have item and want to delete some of it
		get_child(0).count -= amount
		if get_child(0).count == 0:
			tem = get_child(0)
			remove_child(tem)
			tem.show()
			return tem
		var smaller_tem = get_child(0).duplicate()# we need to duplicate the object to pass it to other
		smaller_tem.count = amount
		return smaller_tem
	pass


"
_sections_unfolded = [ "Resource" ]

[node name="InventorySlot" type="Node"]

script = SubResource( 1 )
max_weight = 5000
initial_item = null


