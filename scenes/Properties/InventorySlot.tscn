[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

resource_name = "InventorySlot"
script/source = "extends Node
#class for holding specified things. It describes place on which item is placed (name of node), 
#what is the type of item(permitted_items), how much is there of it(item_count) and can be (max_weight),
#and ?can it be used immediately without switching? (like in_hands or on_belt)
#Every object that is supposed to have some kind of inventory has this node.
#Every such node corresponds to one type of item. 

#So for example player will have it for head, etc.
#Backpack will have infinite number, that will be increased as new items are added to it.
#...you can also hold alive things if they fit
export (int) var max_weight = 5000 #in grams


#onready var permitted_items = []

func _ready():
	
	pass

func _use_item():
	
	pass

func add_item(item_in, amount):
	#check if slot available, is it too big, -and can it be put in this slot-
	var child = get_child(0)
	if child != item_in or (item_in.weight * amount + child.weight * child.count) > max_weight:
		return false
	elif child == null:
		add_child(item_in)#amount already in item
		global.map.remove_child(item_in)
	else:
		child.count += amount
	pass

func remove_item(amount = 0):
	var tem = get_child(0)
	if tem == null or tem.count < amount: #if we don't have item, or to little of it
		return false
	elif amount == 0: #if we have item and want to delete all of it
		remove_child(0)
		return tem
	else: #if we have item and want to delete some of it
		tem.count -= amount
		if tem.count == 0:
			remove_child(0)
			return tem
		var smaller_tem = tem.duplicate()# we need to duplicate the object to pass it to other
		smaller_tem.count -= amount
		return smaller_tem
	pass

"
_sections_unfolded = [ "Resource" ]

[node name="InventorySlot" type="Node"]

script = SubResource( 1 )
max_weight = 5000


